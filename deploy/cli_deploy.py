import filecmp
import os
import subprocess
import sys

import click


class DatabricksGitSync(object):
    def __init__(self, databricks_path, local_path, dry_run):
        self.git_path = os.path.abspath(os.path.join(__file__, "..", "..", "production"))
        self.databricks_path = databricks_path
        self.local_path = local_path

        self.dry_run = dry_run

    def _run(self, command):
        """Runs the given shell command if it is not a dry run.

        Args:
            command: The command to run as a list of strings.
        """
        if not self.dry_run:
            subprocess.call(command)

    def _remove(self, dcmp):
        """Removes all files that are no longer in Git.

        Args:
            dcmp: A file and diretory comparison object generated by filecmp.
        """
        for name in dcmp.right_only:
            full_path = os.path.join(dcmp.right, name)
            databricks_name = full_path.replace(self.local_path, "")

            if os.path.isdir(full_path):
                print("Found directory to clean: {}".format(databricks_name))
                self._run(["databricks", "workspace", "rm", "--recursive", databricks_name])
            else:
                databricks_name = databricks_name.replace(".py", "").replace(".scala", "")
                print("Cleanup {}".format(databricks_name))
                self._run(["databricks", "workspace", "rm", databricks_name])

    def _addition(self, dcmp):
        """Adds files that are in Git but not in Databricks.

        Args:
            dcmp: A file and diretory comparison object generated by filecmp.
        """
        for name in dcmp.left_only:
            full_path = os.path.join(dcmp.left, name)
            print(full_path)
            remote_path = "{}{}".format(self.databricks_path, full_path.replace(self.git_path, ""))

            if os.path.isdir(full_path):
                print("Found directory to add: {} - {}".format(full_path, remote_path))
                self._run(["databricks", "workspace", "import_dir", full_path, remote_path])
            else:
                notebook_type = "PYTHON"
                if full_path.endswith(".scala"):
                    notebook_type = "SCALA"

                remote_path = remote_path.replace(".py", "").replace(".scala", "")
                print("Add single file {} {}".format(full_path, remote_path))
                self._run(
                    [
                        "databricks",
                        "workspace",
                        "import",
                        "-l",
                        notebook_type,
                        full_path,
                        remote_path,
                    ]
                )

    def _overwrite(self, dcmp):
        """Overwrites the files in Databricks with the newest versions from Git.

        Args:
            dcmp: A file and diretory comparison object generated by filecmp.
        """
        for name in dcmp.diff_files:
            full_path = os.path.join(dcmp.left, name)
            notebook_type = "PYTHON"
            if full_path.endswith(".scala"):
                notebook_type = "SCALA"

            remote_path = (
                os.path.join(dcmp.right, name)
                .replace(self.local_path, "")
                .replace(".py", "")
                .replace(".scala", "")
            )
            print("Found file to sync: {} {}".format(full_path, remote_path))
            self._run(
                [
                    "databricks",
                    "workspace",
                    "import",
                    "--overwrite",
                    "-l",
                    notebook_type,
                    full_path,
                    remote_path,
                ]
            )

    def _sync(self, dcmp):
        """Recursive call to synchronize a folder and all of its children.

        Args:
            dcmp: A file and diretory comparison object generated by filecmp.
        """
        self._remove(dcmp)
        self._addition(dcmp)
        self._overwrite(dcmp)

        # Recursive call to clean up.
        for sub_dcmp in dcmp.subdirs.values():
            self._sync(sub_dcmp)

    def sync(self):
        """Synchronizes two folders from Git to Databricks."""
        dcmp = filecmp.dircmp(self.git_path, "{}{}".format(self.local_path, self.databricks_path))
        self._sync(dcmp)


@click.group()
def cli():
    pass


@cli.command()
@click.option("--host", default="https://acmeactivities.cloud.databricks.com", help="Databricks host.")
@click.option("--token", help="Databricks token for authentication.")
def config(host, token):
    home = os.path.expanduser("~")
    filename = os.path.join(home, ".databrickscfg")

    with open(filename, "w") as output_io:
        output_io.write("[DEFAULT]\n")
        output_io.write("host = {}\n".format(host))
        output_io.write("token = {}\n".format(token))


@cli.command()
@click.option("--databricks_path", help="Path to current Databricks snapshot.")
@click.option("--local_path", help="Path to local Databricks snapshot.")
@click.option("--dryrun", default=False)
def sync(databricks_path, local_path, dryrun):
    sync_obj = DatabricksGitSync(databricks_path, local_path, dryrun)
    sync_obj.sync()


if __name__ == "__main__":
    cli()
